/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PerguntaRespostaService } from "../perguntaResposta.service";
import { PerguntaRespostaCreateInput } from "./PerguntaRespostaCreateInput";
import { PerguntaResposta } from "./PerguntaResposta";
import { PerguntaRespostaFindManyArgs } from "./PerguntaRespostaFindManyArgs";
import { PerguntaRespostaWhereUniqueInput } from "./PerguntaRespostaWhereUniqueInput";
import { PerguntaRespostaUpdateInput } from "./PerguntaRespostaUpdateInput";

export class PerguntaRespostaControllerBase {
  constructor(protected readonly service: PerguntaRespostaService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PerguntaResposta })
  async createPerguntaResposta(
    @common.Body() data: PerguntaRespostaCreateInput
  ): Promise<PerguntaResposta> {
    return await this.service.createPerguntaResposta({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PerguntaResposta] })
  @ApiNestedQuery(PerguntaRespostaFindManyArgs)
  async perguntaRespostas(
    @common.Req() request: Request
  ): Promise<PerguntaResposta[]> {
    const args = plainToClass(PerguntaRespostaFindManyArgs, request.query);
    return this.service.perguntaRespostas({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PerguntaResposta })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async perguntaResposta(
    @common.Param() params: PerguntaRespostaWhereUniqueInput
  ): Promise<PerguntaResposta | null> {
    const result = await this.service.perguntaResposta({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PerguntaResposta })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePerguntaResposta(
    @common.Param() params: PerguntaRespostaWhereUniqueInput,
    @common.Body() data: PerguntaRespostaUpdateInput
  ): Promise<PerguntaResposta | null> {
    try {
      return await this.service.updatePerguntaResposta({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PerguntaResposta })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePerguntaResposta(
    @common.Param() params: PerguntaRespostaWhereUniqueInput
  ): Promise<PerguntaResposta | null> {
    try {
      return await this.service.deletePerguntaResposta({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
