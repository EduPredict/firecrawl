/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SessaoDeEstudoService } from "../sessaoDeEstudo.service";
import { SessaoDeEstudoCreateInput } from "./SessaoDeEstudoCreateInput";
import { SessaoDeEstudo } from "./SessaoDeEstudo";
import { SessaoDeEstudoFindManyArgs } from "./SessaoDeEstudoFindManyArgs";
import { SessaoDeEstudoWhereUniqueInput } from "./SessaoDeEstudoWhereUniqueInput";
import { SessaoDeEstudoUpdateInput } from "./SessaoDeEstudoUpdateInput";

export class SessaoDeEstudoControllerBase {
  constructor(protected readonly service: SessaoDeEstudoService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: SessaoDeEstudo })
  async createSessaoDeEstudo(
    @common.Body() data: SessaoDeEstudoCreateInput
  ): Promise<SessaoDeEstudo> {
    return await this.service.createSessaoDeEstudo({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [SessaoDeEstudo] })
  @ApiNestedQuery(SessaoDeEstudoFindManyArgs)
  async sessaoDeEstudos(
    @common.Req() request: Request
  ): Promise<SessaoDeEstudo[]> {
    const args = plainToClass(SessaoDeEstudoFindManyArgs, request.query);
    return this.service.sessaoDeEstudos({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: SessaoDeEstudo })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async sessaoDeEstudo(
    @common.Param() params: SessaoDeEstudoWhereUniqueInput
  ): Promise<SessaoDeEstudo | null> {
    const result = await this.service.sessaoDeEstudo({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: SessaoDeEstudo })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateSessaoDeEstudo(
    @common.Param() params: SessaoDeEstudoWhereUniqueInput,
    @common.Body() data: SessaoDeEstudoUpdateInput
  ): Promise<SessaoDeEstudo | null> {
    try {
      return await this.service.updateSessaoDeEstudo({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: SessaoDeEstudo })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteSessaoDeEstudo(
    @common.Param() params: SessaoDeEstudoWhereUniqueInput
  ): Promise<SessaoDeEstudo | null> {
    try {
      return await this.service.deleteSessaoDeEstudo({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
